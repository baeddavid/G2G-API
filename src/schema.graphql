type Query {
    feed(filter: String, skip: Int, first: Int): Feed!
}

type Mutation {
    signup(email: String!, password: String!, name: String!): AuthPayload

    login(email: String!, password: String!): AuthPayload

    postBathroom(
        businessName: String,
        description: String!,
        address: String!,
        lat: Float!,
        lng: Float!,
        purchaseRequired: Boolean!,
        genderNeutral: Boolean!,
        accessibleStall: Boolean!,
        singleOccupancy: Boolean!,
    ): Bathroom!

    postReview(
        bathroomId: ID!,
        title: String!,
        description: String!,
    ): Review!

    updateBathroom(
        id: ID!,
        businessName: String,
        description: String!,
        address: String!,
        lat: Float!,
        lng: Float!,
        purchaseRequired: Boolean!,
        genderNeutral: Boolean!,
        accessibleStall: Boolean!,
        singleOccupancy: Boolean!, 
    ): Bathroom!

    updateReview(
        id: ID!,
        title: String!,
        description: String!,
    ): Review!

    deleteBathroom(
        id: ID!
    ): Bathroom!

    deleteReview(
        id: ID!
    ): Review!
}

type Bathroom {
    id: ID!
    businessName: String
    description: String!
    address: String!
    lat: Float!
    lng: Float!
    purchaseRequired: Boolean!
    genderNeutral: Boolean!
    accessibleStall: Boolean!
    singleOccupancy: Boolean!
    reviews: [Review!]!
    postedBy: User
}

type Review {
    id: ID!
    title: String!
    description: String!
    createdBy: User!
    bathroom: Bathroom
}

type User {
    id: ID!
    name: String!
    email: String!
    bathrooms: [Bathroom!]!
    reviews: [Review!]!
}

type AuthPayload {
    token: String
    user: User
}

type Feed {
    bathrooms: [Bathroom!]!
    count: Int!
}